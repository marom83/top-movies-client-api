{
  "openapi": "3.0.3",
  "info": {
    "title": "Top Movies - OpenAPI 3.0",
    "description": "Top Movies Openapi spec.",
    "contact": {
      "email": "marom83@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api"
    }
  ],
  "tags": [
    {
      "name": "movie",
      "description": "Everything about movies"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/movie": {
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "Add a new movie",
        "description": "Add a new movie",
        "operationId": "addMovie",
        "requestBody": {
          "description": "Create a new movie",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields"
          }
        }
      },
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find Movies",
        "description": "Returns all movies",
        "operationId": "findAllMovies",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movie/{id}": {
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Update an existing movie",
        "description": "Update an existing movie by Id",
        "operationId": "updateMovie",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of movie that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title of movie that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of movie that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cast",
            "in": "query",
            "description": "Cast of movie that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields to update"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Deletes a movie",
        "description": "delete a movie",
        "operationId": "deleteMovie",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          }
        }
      }
    },
    "/movie/findMovieById/{id}": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find movie by ID",
        "description": "Returns a single movie",
        "operationId": "getMovieById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Movie": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "title": {
            "type": "string",
            "example": "Fight Club"
          },
          "description": {
            "type": "string",
            "example": "desc. of the movie"
          },
          "cast": {
            "type": "string",
            "example": "Brad Pitt"
          }
        },
        "xml": {
          "name": "movie"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "user"
        }
      }
    },
    "securitySchemes": {
      "topmovies_auth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}